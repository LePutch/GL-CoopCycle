

entity Societaire {
  firstName String required minlength(2) maxlength(50)
  lastName String required minlength(2) maxlength(50)
  type SocietaireType required
}

entity Client {
  firstName String required minlength(2) maxlength(50)
  lastName String required minlength(2) maxlength(50)
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/) unique
  phone String required pattern(/^(\+\d{1,3})?\s*(\(\d{1,3}\)|\d{1,3})\s*(\d{3})\s*(\d{2})\s*(\d{2})$/)
  address String required minlength(5) maxlength(100)
}

entity Restaurateur {
  firstName String required minlength(2) maxlength(50)
  lastName String required minlength(2) maxlength(50)
}

entity Restaurant {
  name String required minlength(2) maxlength(100) unique
  address String required minlength(5) maxlength(100)
  menu String maxlength(500)
}

entity Commande {
  dateTime Instant required
  status CommandeStatus required
}

entity Panier {
  id Long required
  description String minlength(5) maxlength(500)
  price Float required min(0)
}

entity Paiement {
  amount Float required min(0)
  paymentType PaymentType required
}

enum SocietaireType {
  LIVREUR,
  RESTAURATEUR,
  CLIENT
}


enum CommandeStatus {
  EN_COURS,
  PRETE,
  LIVREE
}


enum PaymentType {
  CB,
  MASTERCARD,
  VISA,
  PAYPAL,
  APPLE_PAY,
  GOOGLE_PAY,
  CHEQUE_REPAS,
  BITCOIN,
  IZLY
}

relationship OneToOne {
  Commande{panier(id) required} to Panier
}

relationship ManyToOne {
  Client{commande} to Commande{client}
  Restaurateur{commande} to Commande{restaurateur}
  Commande{paiement} to Paiement
}

relationship OneToMany {
  Restaurant{panier} to Panier{restaurant}
  Societaire{restaurateur} to Restaurateur{societaire}
}

relationship ManyToOne {
  Restaurant{restaurateur} to Restaurateur{restaurant}
}

paginate Societaire, Client, Restaurateur, Restaurant, Commande, Panier, Paiement with pagination

dto * with mapstruct

